
plugins {
    id "com.github.maiflai.scalatest" version "0.6-5-g9065d91"
}

apply plugin: 'scala'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

// Pick the Linux version, as it is a tar.gz, since we can simply extract that
def IDEA_SDK_URL = 'http://download.jetbrains.com/idea/ideaIC-14.0.4.tar.gz'


dependencies {
    compile fileTree(dir: 'lib/sdk/', include: ['*/lib/*.jar'])
    compile 'org.scala-lang:scala-library:2.10.0'
    testCompile 'org.scalatest:scalatest_2.10:2.2.4'
    testCompile 'org.mockito:mockito-core:1.10.19'

    // Scalatest requires:
    testRuntime 'org.pegdown:pegdown:1.1.0'
}

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.scala.srcDir "src/main/jflex"

task downloadIdeaSdk(type: Download) {
    sourceUrl = IDEA_SDK_URL
    target = file('idea-sdk.tar.gz')
}

task downloadIdeaJFlex(type: Download) {
    sourceUrl = 'https://github.com/JetBrains/intellij-community/raw/master/tools/lexer/jflex-1.4/lib/JFlex.jar'
    target = file('JFlex.jar')
}

task downloadIdeaJFlexSkeleton(type: Download) {
    sourceUrl = 'https://raw.github.com/JetBrains/intellij-community/master/tools/lexer/idea-flex.skeleton'
    target = file('idea-flex.skeleton')
}

task extractIdeaSdk(type: Copy, dependsOn: [downloadIdeaSdk]) {
    def zipFile = file('idea-sdk.tar.gz')
    def outputDir = file("lib/sdk")

    from tarTree(resources.gzip(zipFile)).matching { include '*/lib/*.jar' }
    into outputDir
}

task lexer(type: JavaExec, dependsOn: [downloadIdeaJFlex, downloadIdeaJFlexSkeleton]) {
    classpath(files('JFlex.jar'))
    inputs.file 'src/main/jflex/com/gshakhn/idea/idea/fitnesse/lang/lexer/Fitnesse.flex'
    outputs.file 'src/main/jflex/com/gshakhn/idea/idea/fitnesse/lang/lexer/_Fitnesse.java'

    main 'JFlex.Main'
    args "-sliceandcharat", "-skel", 'idea-flex.skeleton',
                "-d", 'src/main/jflex/com/gshakhn/idea/idea/fitnesse/lang/lexer',
                "-q", 'src/main/jflex/com/gshakhn/idea/idea/fitnesse/lang/lexer/Fitnesse.flex'
    jvmArgs '-Dfile.encoding=UTF-8'
}

compileScala {
    dependsOn lexer, extractIdeaSdk
}

test {
    // Avoid parallel execution, since the IntelliJ boilerplate is not up to that
    maxParallelForks = 1
}

idea.module.iml {
    beforeMerged { project ->
        project.dependencies.clear()
    }
    withXml {
        it.node.@type = "PLUGIN_MODULE"
    }
}

// create Gradle wrapper 
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

// ========= Custom tasks ========= //

class Download extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
       ant.get(src: sourceUrl, dest: target, skipexisting: 'true')
    }
}
